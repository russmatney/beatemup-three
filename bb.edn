{:paths ["src"]
 :tasks
 {:requires ([babashka.fs :as fs]
             [tasks])
  :enter    (println "Entering:" (:name (current-task)))
  :init
  (do
    (defn home-dir []
      (-> (shell {:out :string}
                 "zsh -c 'echo -n ~'")
          :out))

    (defn shell-and-log
      ([x] (shell-and-log {} x))
      ([opts x]
       (println x)
       (shell opts x))))

  watch  tasks/watch
  pixels tasks/pixels
  is-mac (do (println "eh?" (tasks/is-mac?)))
  ;; serve  tasks/serve

  ;; build-web
  ;; (shell-and-log
  ;;   {:dir "./Game"}
  ;;   "godot --export HTML5 ../build/index.html")
  ;; serve-web (shell-and-log "bb serve -d ./build")

  ;; build-and-serve {:depends [build-web serve-web]}
  ;; deploy-web      (shell-and-log "aws s3 sync build/ s3://protomoon.russmatney.com")

  install-addons
  (do
    (shell-and-log "mkdir -p addons")
    (let [addons
          {"btree" "fian46/addons-btree/addons/btree"}]
      ;; TODO clone locally (or at least log if missing)
      (doall
        (->>
          addons
          (map
            (fn [[name path]]
              (let [project-addon-path (str "./addons/" name)
                    symlink-target     (str (home-dir) "/" path)]
                (println "creating symlink from"
                         project-addon-path "to" symlink-target)
                (fs/delete-if-exists project-addon-path)
                (fs/create-sym-link project-addon-path symlink-target))))))
      ;; TODO auto-health check/doctor
      ;; i.e. make sure these symlinks exist
      ))}}
